#             _
#     _______| |__  _ __ ___
#    |_  / __| '_ \| '__/ __|
#     / /\__ \ | | | | | (__
#    /___|___/_| |_|_|  \___|
#    
# source - https://github.com/sdatth/dotfiles


## dependencies for zsh 
#    zsh                      > zsh shell
#    zsh-syntax-highlighting  > syntax highlighting for zsh in standard repos
#    autojump                 > jump to directories with j or jc for child or jo to open in file manager
#    zsh-autosuggestions      > suggestions based on your history
#
# config file location "~/.zshrc"
# see /usr/share/doc/zsh/examples/zshrc for examples

# start tmux automatically when the terminal is launched
if command -v tmux &> /dev/null && [ -n "$ps1" ] && [[ ! "$term" =~ screen ]] && [[ ! "$term" =~ tmux ]] && [ -z "$tmux" ]; then
  tmux -u
fi

# hombrew
#eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

# export new zsh dir
export zdotdir=$home/.config/zsh

## kali configs
setopt autocd              # change directory just by typing its name
#setopt correct            # auto correct mistakes
setopt interactivecomments # allow comments in interactive mode
setopt ksharrays           # arrays start at 0
setopt magicequalsubst     # enable filename expansion for arguments of the form ‘anything=expression’
setopt nonomatch           # hide error message if there is no match for the pattern
setopt notify              # report the status of background jobs immediately
setopt numericglobsort     # sort filenames numerically when it makes sense
setopt promptsubst         # enable command substitution in prompt

wordchars=${wordchars//\/} # don't consider certain characters part of the word

# hide eol sign ('%')
export prompt_eol_mark=""

# configure key keybindings
bindkey -e                                        # emacs key bindings
bindkey ' ' magic-space                           # do history expansion on space
bindkey '^[[3;5~' kill-word                       # ctrl + supr
bindkey '^[[1;5c' forward-word                    # ctrl + ->
bindkey '^[[c' forward-word                       # ctrl + ->
bindkey '^[[1;5d' backward-word                   # ctrl + <-
bindkey '^[[d' backward-word                      # ctrl + <-
bindkey '^[[5~' beginning-of-buffer-or-history    # page up
bindkey '^[[6~' end-of-buffer-or-history          # page down
bindkey '^[[z' undo                               # shift + tab undo last action

# enable completion features
autoload -uz compinit
compinit -d ~/.cache/zcompdump
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-za-z}={a-za-z}' # case insensitive tab completion

# beeping is annoying
unsetopt beep 

# history configurations
histfile=~/.zsh_history
histsize=1000
savehist=2000
setopt hist_expire_dups_first # delete duplicates first when histfile size exceeds histsize
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
#setopt share_history         # share command history data

# force zsh to show the complete history
alias history="history 0"

# plugins
source "$zdotdir/zsh-functions"
zsh_add_plugin "zsh-users/zsh-autosuggestions"
zsh_add_plugin "zsh-users/zsh-syntax-highlighting"
source "$zdotdir/autojump.sh"
source "$home/.nix-profile/share/fzf/key-bindings.zsh"

## aliases
# navigation
alias ..='cd ..'
alias .2='cd ../..'
alias .3='cd ../../..'
alias .4='cd ../../../..'
alias .5='cd ../../../../..'

# merge xresources
alias merge='xrdb -merge ~/.xresources'

# system & update sec
alias au='sudo apt update'
alias au='sudo apt upgrade'
alias ai='sudo apt install'
alias fu='flatpak update'
alias fu='flatpak uninstall --unused'
alias ar='sudo apt --purge remove'
alias ssn='sudo shutdown now'
alias sr='sudo reboot'
alias sd='sudo'
alias sn='shutdown now'
alias ua='bash ~/stuff/projects/configs/shell-scripts/startup.sh'
alias pi='python3 -m pip install --user --no-cache-dir'
alias pu='python3 -m pip install --user -u'
alias pr='python3 -m pip uninstall'

# rclone sec
alias rfiles='echo "syncing to drive & backblaze" | cowsay -f tux && rclone sync -p files/ drivec:/files/ && echo && rclone sync -p files/ blazec:/files/ ' 
alias rcloud='echo "syncing to drive" | cowsay -f tux && rclone sync -p dropbox/ drivec:/dropbox/'
alias revfiles='echo "syncing to localhost" | cowsay -f tux && rclone sync -p drivec:/files/ files/ '
alias revcloud='echo "syncing to localhost" | cowsay -f tux && rclone sync -p drivec:/dropbox/ dropbox/'
alias rdrop='echo "syncing to both cloud providers" | cowsay -f tux && rclone sync -p dropbox/ db:/unsec/ && echo && rclone sync -p dropbox/ drivec:/dropbox/'
alias revdrop='echo "syncing to localhost" | cowsay -f tux && rclone sync -p db:/unsec/ dropbox/'
alias rprojects='echo "syncing to cloud providers" | cowsay -f tux && rclone sync -p projects/ drivec:/projects/ --exclude ".git/**" --exclude "site/**" && echo && rclone sync -p projects/ blazec:/projects/ --exclude ".git/**" --exclude "site/**"'
alias revprojects='echo "syncing to localhost" | cowsay -f tux && rclone sync -p drivec:/projects/ projects/ --exclude ".git/**" --exclude "site/**" '

# text editors
alias v='vim'
alias e='nvim'
alias vimrc='vim ~/.vimrc'
alias nvimrc='nvim ~/.config/nvim/init.vim'
alias zshrc='nvim ~/.zshrc'
alias bashrc='nvim ~/.bashrc'
alias fishrc='nvim ~/.config/fish/config.fish'

# vagrant sec
alias vu='vagrant up'
alias vh='vagrant halt'
alias vd='vagrant destroy'
alias vs='vagrant ssh'

# exa
alias ls='exa --color=always --group-directories-first' 
alias la='exa -a --color=always --group-directories-first'  
alias ll='exa -al --color=always --group-directories-first' 
alias l.='exa -a | egrep "^\."'

# git
alias pull='git pull github main && sleep 5 && git pull gitlab main'
alias push='git push github main && sleep 5 && git push gitlab main'
alias pullmaster='git pull github master && sleep 5 && git pull gitlab master'
alias pushmaster='git push github master && sleep 5 && git push gitlab master'
alias add='git add .'
alias commit='git commit -s -m'
alias rcommit='git commit -m'
alias tlog='git log --graph --oneline --branches'
alias branch='git branch'
alias checkout='git checkout'
alias clone='git clone'
alias fetch='git fetch'
alias pullit='git pull origin'
alias pushit='git push origin'
alias tag='git tag'
alias newtag='git tag -a'
alias gits='git secret'

# kubectl
alias k='kubectl'
# complete -f __start_kubectl k

# others
alias gt='gpg2 --card-status'
alias yt='ykman list'
alias yd='youtube-dl'
alias btop='bpytop'
alias ctop='docker run --rm -ti --name=ctop --volume /var/run/docker.sock:/var/run/docker.sock:ro quay.io/vektorlab/ctop:latest'
alias dc='docker'
alias wu='sudo wg-quick up wg0'
alias wd='sudo wg-quick down wg0'
alias tb="nc termbin.com 9999"  # usage [echo "hello world" | tb] , [cat file | tb]
alias clearclip="xsel -bc"

# other program configs
fd_options="--follow --exclude .git --exclude node_modules"
export bat_pager="less -r"

# fzf configs
export fzf_default_opts="--no-mouse --height 70% -1 --reverse --multi --inline-info --preview='[[ \$(file --mime {}) =~ binary ]] && echo {} is a binary file || (bat --style=numbers --color=always {} || cat {}) 2> /dev/null | head -300' --preview-window='right:hidden:wrap' --bind='f3:execute(bat --style=numbers {} || less -f {}),f2:toggle-preview'"
export fzf_default_command="fd --type f --hidden --follow -e libreoffice -e .nix-defexpr -e.nix-profile -e plugins -e plugged -e coc -e google-chrome -e code -e .git -e tor -e .local -e .vscode -e .npm -e oth -e snap -e .cache -e .vim -e node_modules  -e .ansible -e .anydesk -e .atom -e .clamtk -e .fzf -e .gem -e .gnupg -e ipython -e .joplin -e .jupyter -e .mozilla -e .npm -e .password-store -e .pki -e .ssh -e .var -e .vagrant.d -e vagrant  "
export fzf_ctrl_t_command="$fzf_default_command"
export fzf_alt_c_command="fd --type d $fd_options"

# custom functions
## ex - archive extractor
## usage: ex <file>
ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.tar.xz)    tar xjf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# render markdown files using glow with less as pager
md(){
    glow "$@" -s dark | less -r 
}

# invoke fetch master 6000
# $home/dotfiles/configurations/.config/fm6000/fm6000 -f $home/dotfiles/configurations/.config/fm6000/wolf.txt

# uncomment the below line to use starship prompt
eval "$(starship init zsh)"
